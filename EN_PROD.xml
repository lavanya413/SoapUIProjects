<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="ad0fb8fc-ea52-4253-9629-5bf173e00550" activeEnvironment="Default" name="EventNotifications_Gateway" resourceRoot="${projectDir}" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="64d791ef-81dd-4079-9b80-d18741adb60a" wadlVersion="http://wadl.dev.java.net/2009/02" name="" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="Token" path="/auth/oauth/v2/token" id="765cdf27-5da3-4dbe-b17c-40ffdecda1ed"><con:settings/><con:parameters/><con:method name="Authorization" id="f85caa8e-3c0f-441c-956a-e4cceeaf4cb2" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>407</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500 401</con:status><con:params/><con:element xmlns:tok="https://api.adp.com/auth/oauth/v2/token">tok:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tok="https://api.adp.com/auth/oauth/v2/token">tok:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="329e31f3-fcf3-4b7c-9e3a-9e61d7be83d1" mediaType="application/x-www-form-urlencoded" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint/><con:request>client_id=a11cee9e-6e2a-415c-b9df-000290d08d05&amp;client_secret=05e57200-9910-49dc-97fb-d180da300778&amp;grant_type=client_credentials</con:request><con:originalUri>https://api.adp.com/auth/oauth/v2/token</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="EventNotifications" path="/core/v1/event-notification-messages" id="765cdf27-5da3-4dbe-b17c-40ffdecda1ed"><con:settings/><con:parameters/><con:method name="GET_EN" id="f85caa8e-3c0f-441c-956a-e4cceeaf4cb2" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:even="https://api.adp.com/core/v1/event-notification-messages">even:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:even="https://api.adp.com/core/v1/event-notification-messages">even:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>404 401 400</con:status><con:params/><con:element xmlns:x="https://api.adp.com/core/v1/event-notification-messages/0x_414d51204250494e464f425136202020fa7f185736d8bf29">x:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:even="https://api.adp.com/core/v1/event-notification-messages">even:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>407</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="329e31f3-fcf3-4b7c-9e3a-9e61d7be83d1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint/><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="EventGeneration" path="/events/hr/v1/worker.personal-communication.email.change" id="765cdf27-5da3-4dbe-b17c-40ffdecda1ed"><con:settings/><con:parameters/><con:method name="PersonalEmailChange" id="f85caa8e-3c0f-441c-956a-e4cceeaf4cb2" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401 403</con:status><con:params/><con:element xmlns:wor="https://api.adp.com/events/hr/v1/worker.business-communication.email.change">wor:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:wor="https://api.adp.com/events/hr/v1/worker.business-communication.email.change">wor:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=utf-8</con:mediaType><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:wor="https://api.adp.com/events/hr/v1/worker.business-communication.email.change">wor:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="329e31f3-fcf3-4b7c-9e3a-9e61d7be83d1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint/><con:request>{
  "events": [
    {
      "data": {
        "eventContext": {
          "worker": {
            "associateOID": "G3A86NNGE9MAXGAX"
          }
        },
        "transform": {
          "worker": {
            "businessCommunication": {
              "email": {
                "emailUri": "testingBusiness@gmail.com"
              }
            }
          }
        }
      }
    }
  ]
} 
}</con:request><con:originalUri>https://api.adp.com/events/hr/v1/worker.business-communication.email.change</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Delete_EN" path="/${Properties#deleteCall}" id="43180c4c-63c9-4f22-9f6c-ef66c97e7796"><con:settings/><con:parameters/><con:method name="Method 1" id="17fff36e-4dbe-492e-82be-92f4a47f7b47" method="DELETE"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>404 400</con:status><con:params/><con:element xmlns:api="https://api.adp.com/">api:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:api="https://api.adp.com/">api:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=utf-8</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:api="https://api.adp.com/">api:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:api="https://api.adp.com/">api:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>407</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="2336f063-52e7-47d6-b2a6-10e5ed569319" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource></con:interface><con:testSuite id="9019b5c1-cb15-496b-8ffe-8409a14c5372" name="EventNotification"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="cfb44160-bf40-4e76-8d8d-09bed35832ae" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="EventNotification_Smoke" searchProperties="true"><con:settings/><con:testStep type="properties" name="Properties" id="1a508b64-7d12-423d-875d-0d8b8acf0288"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>Access_Token</con:name><con:value>Bearer null</con:value></con:property><con:property><con:name>adpmsgid</con:name><con:value>0x_414d51204250494e464f4251362020201698b359f3cfdc25</con:value></con:property><con:property><con:name>mailchg_payload</con:name><con:value>{"events":[{"data":{"transform":{"worker":{"person":{"communication":{"email":{"emailUri":"Newmail_9464@gmail.com"}}}}},"eventContext":{"worker":{"associateOID":"G3N25SWCV1M1C0PP"}}}}]}</con:value></con:property><con:property><con:name>deleteCall</con:name><con:value>/core/v1/event-notification-messages/</con:value></con:property><con:property><con:name>GetTokenReqJsonBody</con:name><con:value>client_id=141af2ef-c2cc-48a2-829e-ee701c7adc8d&amp;client_secret=05e57200-9910-49dc-97fb-d180da300778&amp;grant_type=client_credentials</con:value></con:property><con:property><con:name>eventID</con:name><con:value>e7b78163-ead3-4335-9968-99eb9132932f</con:value></con:property><con:property><con:name>emailURI</con:name><con:value>Newmail_4719@gmail.com</con:value></con:property><con:property><con:name>Status</con:name><con:value>true</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Main" id="cd2d95f1-86c4-4e4d-9507-57f9f9c92fea"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringsMap
import groovy.sql.Sql
import groovy.json.JsonSlurper

library = testRunner.testCase.testSuite.project.testSuites["Lib"]
module = library.testCases["LibCase"].testSteps["Common"]
module.run(testRunner, context)

def common = context.common
def sql
def Env
def query
def TotalAPI
def runningStatus = "Good"
def clientID
def clientSecret
def scope
def redirectURI
def sessionIDURI
def smSessionPayload
def accessTokenPayload

def TestCase = testRunner.testCase.testSuite.testCases["EventNotification_Smoke"]
def myTestCase = context.TestCase
def runner
def propTestStep
def testStepName
def groovyUtils
def httpResponseHeaders
def response
def httpStatus
def httpStatusCode
def TimeTaken
def slurper = new JsonSlurper()
def json
def temp
def request
def headers
def IP
def TableName
def FeatureNameOri
def FeatureName
def y

sql = common.SqlConnect()
propTestStep = context.testCase.getTestStepByName("Properties")

try{
	Env = testRunner.testCase.testSuite.project.getPropertyValue("Environment")
	//TableName = "EN_" + Env
	//testtable
	TableName = "en_" + Env.toLowerCase()
	
	log.info "Checking Initial setup to start the test..."
	query = "select * from " + TableName
	TotalAPI = sql.rows(query)
	log.info "Check success.. "
}catch(Exception e){
	runningStatus = "Bad"
	context.testCase.testSuite.project.setPropertyValue("Environment",Env)
	log.info "Initial check failed... Cannot initiate the test."
	log.info "Exception: "+e
}

if(sql != null &amp;&amp; runningStatus != "Bad"){
	log.info "********** Test Started **********"
	if(Env.equalsIgnoreCase("PROD")){
		IP = "https://api.adp.com"
	}
	else if(Env.equalsIgnoreCase("IAT")){
		IP = "https://iat-api.adp.com"
	}
	else if(Env.equalsIgnoreCase("FIT")){
		IP = "https://apifit.nj.adp.com"
	}
	else if(Env.equalsIgnoreCase("DIT")){
		IP = "https://apidit.nj.adp.com"
	}
	
	log.info "IP going to be used: " + IP
	context.testCase.testSuite.project.setPropertyValue("URL",IP)
	log.info "Clearing the old access token values ..."
	log.info "Update " + TableName + " set AccessToken='null' where AuthValue='TRUE'"
	query = "Update " + TableName + " set AccessToken='null' where AuthValue='TRUE'"
	sql.executeUpdate(query)
	log.info "Access tokens cleared .... "
	log.info "Initiating the Assigning Tokens steps ... "
	query = "select distinct clientID, clientSecret from " + TableName
	TotalAPI = sql.rows(query)
	log.info "Number of distinct Feature calls: "+TotalAPI.size()
	
	sql.eachRow(query){
		try{
			clientID = it.ClientID			
			clientSecret = it.ClientSecret
						
			accessTokenPayload = "client_id="+clientID+"&amp;client_secret="+clientSecret+"&amp;grant_type=client_credentials"
			propTestStep.setPropertyValue("GetTokenReqJsonBody",accessTokenPayload)

			//Empty queue before running the actual automation steps
			//runner = TestCase.testSteps["Get_EventNotifications"]
//			runner.run(testRunner, context)
//			
			
			runner = TestCase.testSteps["GetAccessToken"]
			runner.run(testRunner, context)
			log.info "Run Success !!"			
	
			response = context.testCase.testSteps["GetAccessToken"].testRequest.response.responseContent
			log.info "Response:$response"

			runner = TestCase.testSteps["ExtractAccessToken"]
			runner.run(testRunner, context)
	
			json = slurper.parseText response
			temp = json.access_token
			log.info "access_token value: " + temp
						
			sql.executeUpdate("Update " + TableName + " SET AccessToken='"+ temp +"' where ClientID='"+ clientID +"' AND ClientSecret='"+clientSecret+"'")						

			
			runner=TestCase.testSteps["DynamicEmail"]
			runner.run(testRunner, context)
			
			Thread.sleep(4000);

			runner = TestCase.testSteps["EmptyMessageQueue"]
			runner.run(testRunner, context)
			
			runner = TestCase.testSteps["GenerateAnEvent"]
			runner.run(testRunner, context)

			Thread.sleep(4000);

			runner=TestCase.testSteps["updateStatusDB"]
			runner.run(testRunner, context)
			Thread.sleep(10000);
			Thread.sleep(4000);
			runner = TestCase.testSteps["Get_EventNotifications"]
			runner.run(testRunner, context)

			runner=TestCase.testSteps["ExtractAdpMsgID"]
			runner.run(testRunner, context)
			Thread.sleep(4000);

			runner=TestCase.testSteps["updateStatusDB1"]
			runner.run(testRunner, context)

			
			
			runner=TestCase.testSteps["Delete_EN"]
			runner.run(testRunner, context)

			runner=TestCase.testSteps["ExtractAdpMsgIDFromDelete"]
			runner.run(testRunner, context)
			Thread.sleep(4000);

			runner=TestCase.testSteps["updateStatusDB2"]
			runner.run(testRunner, context)
			
			Thread.sleep(10000);
			//log.info "Waiting"


			runner=TestCase.testSteps["Get_EventNotifications_AfterDeletion"]
			runner.run(testRunner, context)

			runner=TestCase.testSteps["updateStatusDB3"]
			runner.run(testRunner, context)

			runner=TestCase.testSteps["sendMail"]
			runner.run(testRunner, context)

			
		}
		catch(Exception e){
			log.info "Some unknown error happened while trying to get the access token for this set of distinct resultset.."
			log.info "Access Token cannot be retrieved!!! .. These URIs will be skipped while running the feature call" 
		}
	}
	log.info "Assigning Tokens steps Completed ... "
	log.info "Initiating the feature calls test using the access tokens .... "
	
	common.SqlClose(sql)
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="GetAccessToken" id="0286b974-d274-4d67-910b-d4b6e969d3a8" disabled="true"><con:settings/><con:config service="" methodName="Authorization" resourcePath="/auth/oauth/v2/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAccessToken" id="52f9c838-1655-40d2-9e1b-84d46b198a5f" mediaType="application/x-www-form-urlencoded" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#URL}</con:endpoint><con:request>${Properties#GetTokenReqJsonBody}</con:request><con:originalUri>https://api.adp.com/auth/oauth/v2/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="5ec5b182-77d4-495f-b516-ecab028fa357" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="f10f129c-c1ed-4dc1-a946-2404139f0063" name="Contains"><con:configuration><token>access_token</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ExtractAccessToken" id="eb9fb496-7486-4ad0-85b0-9cee53e72a49" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def propTestStep
def temp
def authValue

response = context.testCase.testSteps["GetAccessToken"].testRequest.response.responseContent

def slurper = new JsonSlurper()
def json = slurper.parseText response

temp = json.access_token
log.info "Access Token: " + temp
propTestStep = context.testCase.getTestStepByName("Properties")
authValue = "Bearer " + temp
propTestStep.setPropertyValue("Access_Token",authValue)

log.info "Authorization header is set for the feature call !!"</script></con:config></con:testStep><con:testStep type="groovy" name="EmptyMessageQueue" id="767fe8aa-7ff8-42a2-81e3-fc702c23b264" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def httpResponseHeaders
def response
def httpStatus
def httpStatusCode
def TestCase = testRunner.testCase.testSuite.testCases["EventNotification_Smoke"]

def propTestStep = context.testCase.getTestStepByName("Properties")
propTestStep.setPropertyValue( "deleteCall", "/core/v1/event-notification-messages/" )

//runner = TestCase.testSteps["GetAccessToken"]
//runner.run(testRunner, context)
//log.info "Run Success !!"			
//	
//response = context.testCase.testSteps["GetAccessToken"].testRequest.response.responseContent
//log.info "Response:$response"
//
//runner = TestCase.testSteps["ExtractAccessToken"]
//runner.run(testRunner, context)
//	
//json = slurper.parseText response
//temp = json.access_token
//log.info "access_token value: " + temp
//						
//sql.executeUpdate("Update " + TableName + " SET AccessToken='"+ temp +"' where ClientID='"+ clientID +"' AND ClientSecret='"+clientSecret+"'")

runner = TestCase.testSteps["Get_EventNotifications"]
runner.run(testRunner, context)
httpResponseHeaders = context.testCase.testSteps["Get_EventNotifications"].testRequest.response.responseHeaders
httpStatus = httpResponseHeaders["#status#"]
httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
log.info httpStatusCode
while(httpStatusCode.toInteger() == 200){
	def adpmsgid = context.testCase.testSteps["Get_EventNotifications"].testRequest.response.responseHeaders["adp-msg-msgid"][0].toString()
	log.info adpmsgid

	def deleteCallString = propTestStep.getPropertyValue("deleteCall")
	//log.info deleteCallString
	propTestStep.setPropertyValue( "deleteCall", deleteCallString+adpmsgid )
	log.info propTestStep.getPropertyValue("deleteCall")

	runner=TestCase.testSteps["Delete_EN"]
	runner.run(testRunner, context)
	
	propTestStep.setPropertyValue( "deleteCall", "/core/v1/event-notification-messages/" )
			
	runner = TestCase.testSteps["Get_EventNotifications"]
	runner.run(testRunner, context)
	httpResponseHeaders = context.testCase.testSteps["Get_EventNotifications"].testRequest.response.responseHeaders
	httpStatus = httpResponseHeaders["#status#"]
	httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	log.info httpStatusCode
	}
//log.info deleteCallString+adpmsgid


//propTestStep = context.testCase.getTestStepByName("Properties")
//propTestStep.setPropertyValue("adpmsgid",response)

</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="e76de2b2-23de-454c-93bd-00434920cdf8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="DynamicEmail" id="bc27e937-2f76-407a-9520-1454abe6dda1" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import java.util.*
import groovy.json.*

def propTestStep = context.testCase.getTestStepByName("Properties")
def currentpayload = context.testCase.getTestStepByName("Properties").getPropertyValue( "mailchg_payload" )
def slurper = new JsonSlurper()
def json = slurper.parseText(currentpayload)
def currentmail=json.events[0].data.transform.worker.person.communication.email.emailUri[0].toString()
Random rndm = new Random();
def rd= rndm.nextInt(10000)
newmail="Newmail_"+rd+"@gmail.com"
currentmail=newmail
log.info "Changedmail ID :"+currentmail

json.events[0].data.transform.worker.person.communication.email.emailUri = currentmail

JsonBuilder builder = new JsonBuilder(json)
def NewpayLoad =  builder.toString()
log.info NewpayLoad
propTestStep.setPropertyValue("mailchg_payload",NewpayLoad)

</script></con:config></con:testStep><con:testStep type="restrequest" name="GenerateAnEvent" id="038c86c3-fede-43fc-b7cb-8773786a2ad7" disabled="true"><con:settings/><con:config service="" methodName="PersonalEmailChange" resourcePath="/events/hr/v1/worker.personal-communication.email.change" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GenerateAnEvent" id="f53ec212-d051-4732-b78c-a5a982ac17b4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="sm_transactionID" value="Testing_soap1"/>
  &lt;con:entry key="Authorization" value="${Properties#Access_Token}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#URL}</con:endpoint><con:request>${Properties#mailchg_payload}




</con:request><con:originalUri>https://api.adp.com/events/hr/v1/worker.business-communication.email.change</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1bb6e5fa-64d9-4ed6-a841-18268ea52294" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="updateStatusDB" id="17cc8476-e671-4e1f-86ca-d09be5867bd8" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringsMap
import groovy.sql.Sql
import groovy.json.JsonSlurper

library = testRunner.testCase.testSuite.project.testSuites["Lib"]
module = library.testCases["LibCase"].testSteps["Common"]
module.run(testRunner, context)
def common = context.common
def sql

def Env
def query
def TotalAPI
def runningStatus = "Good"
def clientID
def clientSecret
def scope
def redirectURI
def sessionIDURI
def smSessionPayload
def accessTokenPayload

def TestCase = testRunner.testCase.testSuite.testCases["EventNotification_Smoke"]
def myTestCase = context.testCase
def runner
def propTestStep
def testStepName
def groovyUtils
def httpResponseHeaders
def response
def httpStatus
def httpStatusCode

def json
def temp
def request
def headers
def IP
def TableName

	try{
	Env = testRunner.testCase.testSuite.project.getPropertyValue("Environment")
	//TableName = "EN_" + Env
	TableName = "en_" + Env.toLowerCase()
	sql = common.SqlConnect()
	log.info "Checking Initial setup to start the test..."

	httpResponseHeaders = myTestCase.testSteps["GenerateAnEvent"].testRequest.response.responseHeaders
	httpStatus = httpResponseHeaders["#status#"]
	httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	log.info "ResponseStatus:$httpStatus"	
	log.info"Update " + TableName + " SET StatusCode='"+ httpStatusCode +"' where `EventName`='GenerateAnEvent'"
	sql.executeUpdate("Update " + TableName + " SET StatusCode='"+ httpStatusCode +"' where `EventName`='GenerateAnEvent'")	
	log.info "Check success.. "
	
	}catch(Exception e){
		runningStatus = "Bad"
		log.info "Initial check failed... Cannot initiate the test."
		log.info "Exception: "+e
	}

	statusCodeINT = httpStatusCode.toInteger()
	if(statusCodeINT == 200 || statusCodeINT == 201 || statusCodeINT == 202 || statusCodeINT == 204){
			sql.executeUpdate("Update "+ TableName +" SET TestStatus='Passed' where `EventName`='GenerateAnEvent'")
			log.info "TestCase PASS!!"
	}
	else{
		sql.executeUpdate("Update "+ TableName +" SET TestStatus='Failed' where `EventName`='GenerateAnEvent'")
		log.info "TestCase FAIL!!"
	}
Thread.sleep(2000)
	common.SqlClose(sql)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get_EventNotifications" id="3a68e0eb-8fa0-4f86-98cf-1274cef02458" disabled="true"><con:settings/><con:config service="" methodName="GET_EN" resourcePath="/core/v1/event-notification-messages" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_EventNotifications" id="da2ef973-8308-42c7-bb61-cbb825713c0e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="sm_transactionID" value="lavy_gateway"/>
  &lt;con:entry key="Authorization" value="${Properties#Access_Token}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#URL}</con:endpoint><con:request/><con:originalUri>https://api.adp.com/core/v1/event-notification-messages</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="79128e74-ac73-49c1-9354-b2f678828d31" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ExtractAdpMsgID" id="ff992754-2f37-4e66-90e7-5fc37ffc6663" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.sql.Sql


def propTestStep = context.testCase.getTestStepByName("Properties")
propTestStep.setPropertyValue( "deleteCall", "/core/v1/event-notification-messages/" )
def adpmsgid = context.testCase.testSteps["Get_EventNotifications"].testRequest.response.responseHeaders["adp-msg-msgid"][0].toString()
log.info adpmsgid


def deleteCallString = propTestStep.getPropertyValue("deleteCall")
//log.info deleteCallString
propTestStep.setPropertyValue( "deleteCall", deleteCallString+adpmsgid )
log.info propTestStep.getPropertyValue("deleteCall")
//log.info deleteCallString+adpmsgid


//propTestStep = context.testCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("adpmsgid",adpmsgid)

//Getting emailurl from generateEvent call
def resourceURI = context.testCase.testSteps["GenerateAnEvent"].testRequest.resource.toString().split(":")[1].trim()
log.info "generateEventURI:: "+resourceURI

def generateEventResponse = context.testCase.testSteps["GenerateAnEvent"].testRequest.response.responseContent
def slurperresponse = new JsonSlurper().parseText(generateEventResponse)
def emailURI_generateEvent = slurperresponse.events.data.output.worker.person.communication.email.emailUri
log.info ("EmailURI to Validate ==> "+emailURI_generateEvent[0])

//Set the emailURI from GenerateAnEvent Call
propTestStep.setPropertyValue("emailURI", emailURI_generateEvent[0])
log.info propTestStep.getPropertyValue("emailURI")
 
//Getting the EventID and EmailURI from Get Event Notification ResponseBody to evaluate with resourceURI
def response = context.testCase.testSteps["Get_EventNotifications"].testRequest.response.responseContent
log.info "responseBody ==> "+response


def slurperresponse1 = new JsonSlurper().parseText(response)
def eventID = slurperresponse1.events.eventID
def emailURI_GetEventNotifications = slurperresponse1.events.data.output.worker.person.communication.email.emailUri
log.info ("EmailURI to Validate ==> "+emailURI_GetEventNotifications[0])

//Set the EventID from EventNotifications Call
propTestStep.setPropertyValue("eventID", eventID[0])
log.info "EventID to validate ==>"+propTestStep.getPropertyValue("eventID")

if(!propTestStep.getPropertyValue("emailURI").equalsIgnoreCase(emailURI_GetEventNotifications[0]))
{
	propTestStep.setPropertyValue("Status", "false")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="updateStatusDB1" id="9a31fb13-403f-4fd8-9305-a763de18cbfb" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringsMap
import groovy.sql.Sql
import groovy.json.JsonSlurper

library = testRunner.testCase.testSuite.project.testSuites["Lib"]
module = library.testCases["LibCase"].testSteps["Common"]
module.run(testRunner, context)
def common = context.common
def sql

def Env
def query
def TotalAPI
def runningStatus = "Good"
def clientID
def clientSecret
def scope
def redirectURI
def sessionIDURI
def smSessionPayload
def accessTokenPayload

def TestCase = testRunner.testCase.testSuite.testCases["EventNotification_Smoke"]
def myTestCase = context.testCase
def runner
def propTestStep
def testStepName
def groovyUtils
def httpResponseHeaders
def response
def httpStatus
def httpStatusCode

def json
def temp
def request
def headers
def IP
def TableName
def emailURI_Matched
	try{
	Env = testRunner.testCase.testSuite.project.getPropertyValue("Environment")
	//TableName = "EN_" + Env
	TableName = "en_" + Env.toLowerCase()
	sql = common.SqlConnect()
	log.info "Checking Initial setup to start the test..."

	httpResponseHeaders = myTestCase.testSteps["Get_EventNotifications"].testRequest.response.responseHeaders
	httpStatus = httpResponseHeaders["#status#"]
	httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	log.info "ResponseStatus:$httpStatus"	
	log.info"Update " + TableName + " SET StatusCode='"+ httpStatusCode +"' where `EventName`='Get_EventNotifications'"
	sql.executeUpdate("Update " + TableName + " SET StatusCode='"+ httpStatusCode +"' where `EventName`='Get_EventNotifications'")	
	log.info "Check success.. "

	propTestStep = context.testCase.getTestStepByName("Properties")
	emailURI_Matched = propTestStep.getPropertyValue("Status")
	log.info "Status of emailURL mapping in Get_EventNotifications is ==> "+emailURI_Matched
	
	}catch(Exception e){
		runningStatus = "Bad"
		log.info "Initial check failed... Cannot initiate the test."
		log.info "Exception: "+e
	}

	statusCodeINT = httpStatusCode.toInteger()
	if(statusCodeINT == 200 &amp;&amp; emailURI_Matched.equalsIgnoreCase("true")){
			sql.executeUpdate("Update "+ TableName +" SET TestStatus='Passed' where `EventName`='Get_EventNotifications'")
			log.info "TestCase PASS!!"
	}
	else{
		sql.executeUpdate("Update "+ TableName +" SET TestStatus='Failed' where `EventName`='Get_EventNotifications'")
		log.info "TestCase FAIL!!"
	}

	common.SqlClose(sql)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Delete_EN" id="9d0b1da2-6a69-4d01-8f6e-dc2e2462f54b" disabled="true"><con:settings/><con:config service="" resourcePath="/${Properties#deleteCall}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete_EN" id="2336f063-52e7-47d6-b2a6-10e5ed569319" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${Properties#Access_Token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#URL}</con:endpoint><con:request/><con:originalUri>https://api.adp.com/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9f1efdb6-6e5c-422b-aadc-469ecd290f93" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ExtractAdpMsgIDFromDelete" id="a145fd22-bfcc-420c-b631-cc246c7e4a8b" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper


def propTestStep = context.testCase.getTestStepByName("Properties")

//Getting the href from Get Event Notification ResponseBody to evaluate with resourceURI

def adpmsgid_deleteCall = context.testCase.testSteps["Delete_EN"].testRequest.response.responseHeaders["adp-msg-msgid"][0].toString()
log.info adpmsgid_deleteCall


//Getting emailURI and EventID from DeleteNotification Call
def DeleteEventResponse = context.testCase.testSteps["Delete_EN"].testRequest.response.responseContent
def slurperresponse = new JsonSlurper().parseText(DeleteEventResponse)
def emailURI_deleteEvent = slurperresponse.events.data.output.worker.person.communication.email.emailUri[0]
def eventID_deleteEvent = slurperresponse.events.eventID[0]
log.info emailURI_deleteEvent
log.info eventID_deleteEvent

if(!(propTestStep.getPropertyValue("emailURI").equalsIgnoreCase(emailURI_deleteEvent) &amp;&amp; propTestStep.getPropertyValue("eventID").equalsIgnoreCase(eventID_deleteEvent)))
{
	propTestStep.setPropertyValue("Status", "false")
}
</script></con:config></con:testStep><con:testStep type="groovy" name="updateStatusDB2" id="a5810d9f-7969-490b-9861-c3cc897e3c47" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringsMap
import groovy.sql.Sql
import groovy.json.JsonSlurper

library = testRunner.testCase.testSuite.project.testSuites["Lib"]
module = library.testCases["LibCase"].testSteps["Common"]
module.run(testRunner, context)
def common = context.common
def sql

def Env
def query
def TotalAPI
def runningStatus = "Good"
def clientID
def clientSecret
def scope
def redirectURI
def sessionIDURI
def smSessionPayload
def accessTokenPayload

def TestCase = testRunner.testCase.testSuite.testCases["EventNotification_Smoke"]
def myTestCase = context.testCase
def runner
def propTestStep
def testStepName
def groovyUtils
def httpResponseHeaders
def response
def httpStatus
def httpStatusCode

def json
def temp
def request
def headers
def IP
def TableName
def status
	try{
	Env = testRunner.testCase.testSuite.project.getPropertyValue("Environment")
	//TableName = "EN_" + Env
	TableName = "en_" + Env.toLowerCase()
	sql = common.SqlConnect()
	log.info "Checking Initial setup to start the test..."

	httpResponseHeaders = myTestCase.testSteps["Delete_EN"].testRequest.response.responseHeaders
	httpStatus = httpResponseHeaders["#status#"]
	httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	log.info "ResponseStatus:$httpStatus"	
	log.info"Update " + TableName + " SET StatusCode='"+ httpStatusCode +"' where `EventName`='Delete_EN'"
	sql.executeUpdate("Update " + TableName + " SET StatusCode='"+ httpStatusCode +"' where `EventName`='Delete_EN'")	
	log.info "Check success.. "

	propTestStep = context.testCase.getTestStepByName("Properties")
	status = propTestStep.getPropertyValue("Status")
	log.info "Status of emailURL/eventID mapping in Delete_EN is ==> "+status
	
	}catch(Exception e){
		runningStatus = "Bad"
		log.info "Initial check failed... Cannot initiate the test."
		log.info "Exception: "+e
	}

	statusCodeINT = httpStatusCode.toInteger()
	if(statusCodeINT == 200 &amp;&amp; status.equalsIgnoreCase("true")){
			sql.executeUpdate("Update "+ TableName +" SET TestStatus='Passed' where `EventName`='Delete_EN'")
			log.info "TestCase PASS!!"
	}
	else{
		sql.executeUpdate("Update "+ TableName +" SET TestStatus='Failed' where `EventName`='Delete_EN'")
		log.info "TestCase FAIL!!"
	}

	common.SqlClose(sql)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get_EventNotifications_AfterDeletion" id="e0cae163-6058-4a22-acaf-12f4c4472fe3" disabled="true"><con:settings/><con:config service="" methodName="GET_EN" resourcePath="/core/v1/event-notification-messages" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_EventNotifications_AfterDeletion" id="da2ef973-8308-42c7-bb61-cbb825713c0e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${Properties#Access_Token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#URL}</con:endpoint><con:request/><con:originalUri>https://api.adp.com/core/v1/event-notification-messages/0x_414d51204250494e464f425136202020fa7f185736d8bf29</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7a2e9eee-2d14-4eeb-8ad1-f8e271ef408d" name="Valid HTTP Status Codes"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="updateStatusDB3" id="9401e16c-1bc6-4704-90d1-1197faebc0f5" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringsMap
import groovy.sql.Sql
import groovy.json.JsonSlurper

library = testRunner.testCase.testSuite.project.testSuites["Lib"]
module = library.testCases["LibCase"].testSteps["Common"]
module.run(testRunner, context)
def common = context.common
def sql

def Env
def query
def TotalAPI
def runningStatus = "Good"
def clientID
def clientSecret
def scope
def redirectURI
def sessionIDURI
def smSessionPayload
def accessTokenPayload

def TestCase = testRunner.testCase.testSuite.testCases["EventNotification_Smoke"]
def myTestCase = context.testCase
def runner
def propTestStep
def testStepName
def groovyUtils
def httpResponseHeaders
def response
def httpStatus
def httpStatusCode

def json
def temp
def request
def headers
def IP
def TableName
def adpmsgmsgID
def status = false;

	try{
	Env = testRunner.testCase.testSuite.project.getPropertyValue("Environment")
	//TableName = "EN_" + Env
	TableName = "en_" + Env.toLowerCase()
	sql = common.SqlConnect()
	log.info "Checking Initial setup to start the test..."

	httpResponseHeaders = myTestCase.testSteps["Get_EventNotifications_AfterDeletion"].testRequest.response.responseHeaders
	httpStatus = httpResponseHeaders["#status#"]
	httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	log.info "ResponseStatus:$httpStatus"	
	log.info"Update " + TableName + " SET StatusCode='"+ httpStatusCode +"' where `EventName`='Get_EventNotifications_AfterDeletion'"
	sql.executeUpdate("Update " + TableName + " SET StatusCode='"+ httpStatusCode +"' where `EventName`='Get_EventNotifications_AfterDeletion'")	
	log.info "Check success.. "

	def adpmsgid_GetEN = myTestCase.testSteps["Get_EventNotifications_AfterDeletion"].testRequest.response.responseHeaders["adp-msg-msgid"][0].toString()
	propTestStep = context.testCase.getTestStepByName("Properties")
	
	if(!propTestStep.getPropertyValue("adpmsgid").equalsIgnoreCase(adpmsgid_GetEN))
	{
		log.info "adpmsgid after deletion==> "+adpmsgid_GetEN
		log.info "adpmsgid while generation==> "+propTestStep.getPropertyValue("adpmsgid")
		log.info "adp-msg-msgID after deletion is not matched with adpmsgid which we generated!!"
		status = true
		
	}
	
	}catch(Exception e){
		runningStatus = "Bad"
		log.info "Initial check failed... Cannot initiate the test."
		log.info "Exception: "+e
	}

	statusCodeINT = httpStatusCode.toInteger()
	if(statusCodeINT == 204 || status==true){
			sql.executeUpdate("Update "+ TableName +" SET TestStatus='Passed' where `EventName`='Get_EventNotifications_AfterDeletion'")
			log.info "TestCase PASS!!"
	}
	else{
		sql.executeUpdate("Update "+ TableName +" SET TestStatus='Failed' where `EventName`='Get_EventNotifications_AfterDeletion'")
		log.info "TestCase FAIL!!"
	}

	common.SqlClose(sql)

</script></con:config></con:testStep><con:testStep type="groovy" name="sendMail" id="9406708b-6145-4963-b03a-86ee40f9b543" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringsMap
import groovy.sql.Sql
import groovy.json.JsonSlurper

library = testRunner.testCase.testSuite.project.testSuites["Lib"]
module = library.testCases["LibCase"].testSteps["Common"]
module.run(testRunner, context)
def common = context.common
def sql

def Env
def query
def TotalAPI
def runningStatus = "Good"
def clientID
def clientSecret
def scope
def redirectURI
def sessionIDURI
def smSessionPayload
def accessTokenPayload

def TestCase = testRunner.testCase.testSuite.testCases["EventNotification_Smoke"]
def myTestCase = context.testCase
def runner
def propTestStep
def testStepName
def groovyUtils
def httpResponseHeaders
def response
def httpStatus
def httpStatusCode
def TimeTaken
def slurper = new JsonSlurper()
def json
def temp
def request
def headers
def IP
def TableName
def FeatureNameOri
def FeatureName
def y


//context.testCase.testSuite.project.setPropertyValue("Environment",Env)
common.sendMail(runningStatus)</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="ccc351b6-d762-4103-9580-2cbead5217be" name="Lib"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="99f1a742-c96d-4db6-98ac-a57720c2e66a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="LibCase" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Common" id="9ece6ba3-109f-41f4-911d-68000a59f919"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import javax.mail.*
import javax.mail.internet.MimeMessage
import javax.mail.internet.*
import javax.activation.*
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.mysql.jdbc.Driver")

class Common
{
	def log
	def context
	def testRunner
	// Class constructor with same case as Class name
	def Common(logIn,contextIn,testRunnerIn)
	{
		this.log = logIn
		this.context = contextIn
		this.testRunner = testRunnerIn
	}
	def SqlConnect()
	{
	       def db
	       def sql = null
	       try{
	                       db = [url:'jdbc:mysql://localhost:3306/test', user:'root', password:'root', driver:'com.mysql.jdbc.Driver']
	                       sql = Sql.newInstance(db.url, db.user, db.password, db.driver)
	                       log.info "MySql DB Connect: Connected !!"
	       }catch(Exception e){
	                       log.info "MySql DB Connect: Failed !!"
	                       log.info "Exception:$e" 
	                       sql = null                               
	       }
	       return sql;
	}
	def SqlClose(sql)
	{
	       sql.close()
	       log.info "MySql DB Connect: Connection closed !!"
	}
	def getIP(Env,sql){
	       def IP
	       sql.eachRow("select * from apiproxy_serverip where Environment='" + Env + "_Gateway'"){
	                       IP = it.IP
	       }
	       //log.info "IP set for the Environment $Env: $IP"
	       return IP
	}
	def sendMail(RunStatus){
	       def message
	       def mailTable = ""
	       def OverallStatus = ""
	       def OverallStatusAll = ""
	       def OverallStatusSub = "" 
	       def tableHeading = ""
	       def strToMail = testRunner.testCase.testSuite.project.getPropertyValue("MailID")
	       def Env = testRunner.testCase.testSuite.project.getPropertyValue("Environment")
	       log.info Env
	       Env = Env.toUpperCase()
	       log.info Env
	       def subject = "EventNotification Gateway - $Env - "
	       def mailStyle = "<style type=text/css>#customers{font-family:Trebuchet MS, Calibri (Body), Calibri (Body), Calibri (Body);border-collapse:collapse;}#customers td, #customers th {font-size:1em;border:1px solid #98bf21;padding:3px 7px 2px 7px;}#customers th {font-size:16px;text-align:left;padding-top:5px;padding-bottom:4px;background-color:#44AACA;color:#ffffff;} table{ width:95%;} .first{width:500px;font-size:10px;} .other{width:200px;font-size:10px;}</style>"
	       def mailBodyText = "<center><span style='font-size:10.0pt;font-family:Calibri (Body),Calibri (Body);color:plum'> </span></center><dd>"
	       def endText = "<br><dd><dd><p><i>For queries/issues/suggestions please contact ADP Marketplace QA Team</i></p>"
	       def mailAddress_To
	       if(RunStatus.equals("Good")){
	                       tableHeading = "<table id=customers><TR><th class=other>Call</th><th class=other>ClientID</th><th class=other>ClientSecret</th><th class=other>AccessToken(generated)</th><th class=other>TestStatus</th><th class=other>StatusCode</th></TR>"
	                       mailTable = getMailTable() + "</table>"
	                       OverallStatusAll = (getSumList()).split("~~~")
	                       OverallStatus = OverallStatusAll[0]
	                       OverallStatusSub = OverallStatusAll[1]
	                       log.info OverallStatusSub
	                       if(!(OverallStatusSub.contains("Failed: 0"))){
	                       	log.info "There is some failures. So setting the mail IDs to failed list..."
	                       	strToMail = testRunner.testCase.testSuite.project.getPropertyValue("MailID")
	                       } 
	                       
	       }
	       else{
	                       mailTable = "<br><p><b>Test Automation Cannot be initiated !!. Encountered issue.<br><br>Possible Root Cause:<font color = RED> *** 1) Environment value entered may be not matching the records.***** 2) Feature/SOR name(s) used does not match the records.***** 3) Test DB is Down.***</font></b></p>"
	       }
	       try{
	       			   mailAddress_To = strToMail.split(";");
	                       Properties props = new Properties()
	                       props.put("mail.host", "mailrelay.nj.adp.com")                               
	                       Session mailConnection = Session.getInstance(props, null)
	                       Message msg = new MimeMessage(mailConnection)
	                       Address fromAddress = new InternetAddress("ADP.Marketplace.QA@ADP.com", "adpadp@11")
	                       //Address b = new InternetAddress(strToMail);
	                       if ((OverallStatusSub.contains("Passed: 0, Failed: 0"))){
	                       	mailTable = "<br><p><b>Test Automation Cannot be initiated !!. Encountered issue.<br><br>Possible Root Cause:<font color = RED> Check for the proper environment value and enter the proper Feature name... OR .... Enter data to that feature in the DB in that table.</font></b></p>"
	                       	message = mailStyle + mailBodyText + OverallStatus + mailTable + endText
	                       }
	                       else{
	                       	message = mailStyle + mailBodyText + OverallStatus + tableHeading + mailTable + endText
	                       }
	                       msg.setContent(message, "text/html; charset=ISO-8859-1")
	                       msg.setFrom(fromAddress)
	                      InternetAddress[] mailAddress_TO = new InternetAddress [mailAddress_To.length];
						 for(int i=0;i<mailAddress_To.length;i++)
						 { 	
						 	log.info "Mail_IDs to be used:" +  mailAddress_To[i]
						     mailAddress_TO[i] = new InternetAddress(mailAddress_To[i]);
						 }          
						 msg.addRecipients(Message.RecipientType.TO, mailAddress_TO);
	                       msg.setSubject(subject+OverallStatusSub)
	                       Transport.send(msg)
	                       log.info "Send Mail: SUCCESS!!"
	       }catch(Exception e){
	                       log.info "Oooops... Encountered an issue while sending mail !!!"
	                       log.info "Exception:$e"
	       }
	}
	def getMailTable(){
	       def sql
	      def Env = testRunner.testCase.testSuite.project.getPropertyValue("Environment")
	       def mailTable = ""
	       //def RunForValues
	       //def RunForArray
	       def TableName
	       def resultWc = ""
	       def query
	       def URI
	       def columnValue = [null]
	       def rowOrderOri
	       def rowOrderArray
	       def j
	       def FeatureNameOri
	       def FeatureName
	      

	       log.info "Entering getMailTable() function !!"
	       sql = SqlConnect()
	       if(sql != null){
			//TableName = "EN_" + Env.toUpperCase()
			TableName = "en_" + Env.toLowerCase()
			query = "Select * From " + TableName 
			sql.eachRow(query){
              		if("true"){
                              URI = it.EventName.trim()
                              if(it.TestStatus.equalsIgnoreCase("Passed")){
                              	 
                                              resultWc = "<B><font color = GREEN>Pass</font></B>"
                             		 
                              }
                              else{
                                              resultWc = "<B><font color = RED>Fail</font></B>"
                              }
                              mailTable = mailTable + "<TR><td class=other>$URI<td class=other>$it.ClientID</td><td class=other>$it.ClientSecret</td><td class=other>$it.AccessToken</td><td class=other>$resultWc</td><td class=other>$it.StatusCode</td></TR>"
              		}
              		else{
              			log.info "This URI is skipped from adding to the mail because Auth Value is false."
              			log.info "URI: " + it.FeatureURI.trim() 
              		}
              } 
	       	
			SqlClose(sql) 
			                  
	       }else{
	                       log.info "Issue Creating the mail table"
	                       mailTable = "<br><p><b>Test Automation Cannot be initiated !!. Encountered issue.<br><br>Possible Root Cause:<font color = RED> *** 1) Environment value entered may be not matching the records.***** 2) Feature/SOR name(s) used does not match the records.***** 3) Test DB is Down.***</font></b></p>"
	       }
	       
	       return mailTable
	}
	def getSumList(){
	       def sql
	       def Env
	       def SumList = ""
	       def TableName
	       def TotalAPI
	       def Tsize = 0
	       def passC
	       def Psize = 0
	       def Fsize = 0
	       def query
	       def query1
	       def columnValue = [null]
	       def FeatureNameOri
	       def FeatureName
	       def i

		  log.info "Entering getSumList() function !!"
	       sql = SqlConnect()
	       if(sql != null){
	                       Env = testRunner.testCase.testSuite.project.getPropertyValue("Environment")
	                       
	                       //TableName = "EN_" + Env.toUpperCase()
				TableName = "en_" + Env.toLowerCase()

					   		query = "Select * From " + TableName
		                       	query1 = "Select * From " + TableName + " where TestStatus='Passed'"
						   	
						   	TotalAPI = sql.rows(query)
		                       	Tsize = Tsize + TotalAPI.size()
		                       	passC = sql.rows(query1)
		                       	Psize = Psize + passC.size()
					   	                                                             
	                       Fsize = Tsize - Psize
	                       SumList = "<p><b>Total APIs Executed : <b>$Tsize</b><br>Total Passed : <b>$Psize</b><br>Total Failed : <b>$Fsize</b></b></p><br>~~~Passed: $Psize, Failed: $Fsize"
	                       SqlClose(sql)
	       }else{
	                       log.info "Issue Creating the Sum List"
	       }
	       return SumList
	}
}

context.setProperty( "common", new Common( log, context, testRunner) )
log.info "Library Context:"+context]]></script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>Environment</con:name><con:value>PROD</con:value></con:property><con:property><con:name>ClientId</con:name><con:value>a11cee9e-6e2a-415c-b9df-000290d08d05</con:value></con:property><con:property><con:name>ClientSecret</con:name><con:value>05e57200-9910-49dc-97fb-d180da300778</con:value></con:property><con:property><con:name>MailID</con:name><con:value>subrahmanyam.lagisetti@adp.com</con:value></con:property><con:property><con:name>URL</con:name><con:value>https://api.adp.com</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>